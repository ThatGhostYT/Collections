export default class {
    entries;
    max;
    constructor(...entries) {
        this.entries = [];
        this.max = 200;
        if (entries)
            this.addEntry(...entries);
    }
    set maxLength(max) {
        this.max = max;
    }
    get length() {
        return this.entries.length;
    }
    addEntry(...entries) {
        const keys = this.keys();
        for (const entry of entries) {
            if (keys.includes(entry.key))
                throw new Error(`Collection keys must be unique. ${entry.key} is already in use.`);
            if ((this.length + entries.length) >= this.maxLength)
                throw new Error(`Cannot add entries because max length will have been reached. Collection Length: ${this.length} Max Length: ${this.maxLength}`);
            this.entries.push(entry);
        }
    }
    get(key) {
        let ret;
        for (const entry of this.entries) {
            if (entry.key === key) {
                ret = entry.value;
                break;
            }
        }
        return ret;
    }
    remove(key) {
        const i = this.entries.findIndex((item) => item.key === key);
        if (i !== 1) {
            this.entries.splice(i, 1);
        }
    }
    first() {
        return this.entries[0].value;
    }
    last() {
        return this.entries[this.length - 1].value;
    }
    keys() {
        const keys = [];
        for (const entry of this.entries) {
            keys.push(entry.key);
        }
        return keys;
    }
    values() {
        const values = [];
        for (const entry of this.entries) {
            values.push(entry.value);
        }
        return values;
    }
    randomKey() {
        const keys = this.keys();
        return keys[Math.floor(Math.random() * keys.length)];
    }
    random() {
        const values = this.values();
        return values[Math.floor(Math.random() * values.length)];
    }
    [Symbol.iterator]() {
        let i = -1;
        const entries = this.entries;
        return {
            next() {
                return {
                    value: entries[++i]
                        ? [entries[i].key, entries[i].value]
                        : undefined,
                    done: i >= entries.length
                };
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL3J1bm5lci9Db2xsZWN0aW9ucy9Db2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sQ0FBQyxPQUFPO0lBQ0wsT0FBTyxDQUFVO0lBQ2pCLEdBQUcsQ0FBUztJQUVwQixZQUFZLEdBQUcsT0FBZ0I7UUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFHLE9BQU87WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksU0FBUyxDQUFDLEdBQVc7UUFDeEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHLE9BQWdCO1FBQzNCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixLQUFJLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBQztZQUMxQixJQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxLQUFLLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2hILElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG9GQUFvRixJQUFJLENBQUMsTUFBTSxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7WUFDck0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDRixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDZCxJQUFJLEdBQUcsQ0FBQztRQUNSLEtBQUksTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBQztZQUMvQixJQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFDO2dCQUNwQixHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDbEIsTUFBTTthQUNOO1NBQ0Q7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVztRQUNqQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUM3RCxJQUFHLENBQUMsS0FBSyxDQUFDLEVBQUM7WUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekI7SUFDRixDQUFDO0lBRUQsS0FBSztRQUNKLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUk7UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUk7UUFDSCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7UUFDMUIsS0FBSSxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTTtRQUNMLE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztRQUN6QixLQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTO1FBQ1IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxNQUFNO1FBQ0wsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDWCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLE9BQU87WUFDTixJQUFJO2dCQUNILE9BQU87b0JBQ04sS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDbEIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO3dCQUNuQyxDQUFDLENBQUMsU0FBUztvQkFDWixJQUFJLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNO2lCQUN6QixDQUFBO1lBQ0YsQ0FBQztTQUNELENBQUE7SUFDRixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgRW50cnl7XG5cdGtleTogc3RyaW5nO1xuXHR2YWx1ZTogYW55O1xufVxuXG5pbnRlcmZhY2UgQ29sbGVjdGlvbkl0ZXJhYmxle1xuXHR2YWx1ZTogYW55IHwgdW5kZWZpbmVkO1xuXHRkb25lOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzc3tcblx0cHJpdmF0ZSBlbnRyaWVzOiBFbnRyeVtdO1xuXHRwcml2YXRlIG1heDogbnVtYmVyO1xuXHRcblx0Y29uc3RydWN0b3IoLi4uZW50cmllczogRW50cnlbXSl7XG5cdFx0dGhpcy5lbnRyaWVzID0gW107XG5cdFx0dGhpcy5tYXggPSAyMDA7XG5cdFx0aWYoZW50cmllcykgdGhpcy5hZGRFbnRyeSguLi5lbnRyaWVzKTtcblx0fVxuXG5cdHNldCBtYXhMZW5ndGgobWF4OiBudW1iZXIpe1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXHR9XG5cblx0Z2V0IGxlbmd0aCgpe1xuXHRcdHJldHVybiB0aGlzLmVudHJpZXMubGVuZ3RoO1xuXHR9XG5cdFxuXHRhZGRFbnRyeSguLi5lbnRyaWVzOiBFbnRyeVtdKXtcblx0XHRjb25zdCBrZXlzID0gdGhpcy5rZXlzKCk7XG5cdFx0Zm9yKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuXHRcdFx0aWYoa2V5cy5pbmNsdWRlcyhlbnRyeS5rZXkpKSB0aHJvdyBuZXcgRXJyb3IoYENvbGxlY3Rpb24ga2V5cyBtdXN0IGJlIHVuaXF1ZS4gJHtlbnRyeS5rZXl9IGlzIGFscmVhZHkgaW4gdXNlLmApO1xuXHRcdFx0aWYoKHRoaXMubGVuZ3RoICsgZW50cmllcy5sZW5ndGgpID49IHRoaXMubWF4TGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBhZGQgZW50cmllcyBiZWNhdXNlIG1heCBsZW5ndGggd2lsbCBoYXZlIGJlZW4gcmVhY2hlZC4gQ29sbGVjdGlvbiBMZW5ndGg6ICR7dGhpcy5sZW5ndGh9IE1heCBMZW5ndGg6ICR7dGhpcy5tYXhMZW5ndGh9YClcblx0XHRcdHRoaXMuZW50cmllcy5wdXNoKGVudHJ5KTtcblx0XHR9XG5cdH1cblxuXHRnZXQoa2V5OiBzdHJpbmcpe1xuXHRcdGxldCByZXQ7XG5cdFx0Zm9yKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcyl7XG5cdFx0XHRpZihlbnRyeS5rZXkgPT09IGtleSl7XG5cdFx0XHRcdHJldCA9IGVudHJ5LnZhbHVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHJlbW92ZShrZXk6IHN0cmluZyl7XG5cdFx0Y29uc3QgaSA9IHRoaXMuZW50cmllcy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0ua2V5ID09PSBrZXkpO1xuXHRcdGlmKGkgIT09IDEpe1xuXHRcdFx0dGhpcy5lbnRyaWVzLnNwbGljZShpLDEpO1xuXHRcdH1cblx0fVxuXG5cdGZpcnN0KCl7XG5cdFx0cmV0dXJuIHRoaXMuZW50cmllc1swXS52YWx1ZTtcblx0fVxuXG5cdGxhc3QoKXtcblx0XHRyZXR1cm4gdGhpcy5lbnRyaWVzW3RoaXMubGVuZ3RoIC0gMV0udmFsdWU7XG5cdH1cblxuXHRrZXlzKCl7XG5cdFx0Y29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcblx0XHRmb3IoY29uc3QgZW50cnkgb2YgdGhpcy5lbnRyaWVzKXtcblx0XHRcdGtleXMucHVzaChlbnRyeS5rZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4ga2V5cztcblx0fVxuXG5cdHZhbHVlcygpe1xuXHRcdGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcblx0XHRmb3IoY29uc3QgZW50cnkgb2YgdGhpcy5lbnRyaWVzKXtcblx0XHRcdHZhbHVlcy5wdXNoKGVudHJ5LnZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxuXG5cdHJhbmRvbUtleSgpe1xuXHRcdGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKTtcblx0XHRyZXR1cm4ga2V5c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBrZXlzLmxlbmd0aCldO1xuXHR9XG5cblx0cmFuZG9tKCl7XG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy52YWx1ZXMoKTtcblx0XHRyZXR1cm4gdmFsdWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZhbHVlcy5sZW5ndGgpXTtcblx0fVxuXG5cdFtTeW1ib2wuaXRlcmF0b3JdKCl7XG5cdFx0bGV0IGkgPSAtMTtcblx0XHRjb25zdCBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuXHRcdHJldHVybiB7XG5cdFx0XHRuZXh0KCk6IENvbGxlY3Rpb25JdGVyYWJsZXtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2YWx1ZTogZW50cmllc1srK2ldXG5cdFx0XHRcdFx0XHQ/IFtlbnRyaWVzW2ldLmtleSxlbnRyaWVzW2ldLnZhbHVlXVxuXHRcdFx0XHRcdFx0OiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0ZG9uZTogaSA+PSBlbnRyaWVzLmxlbmd0aFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59Il19