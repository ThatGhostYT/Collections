export default class {
    entries;
    constructor(...entries) {
        this.entries = [];
        if (entries)
            this.addEntry(...entries);
    }
    get length() {
        return this.entries.length;
    }
    addEntry(...entries) {
        for (const entry of entries) {
            this.entries.push(entry);
        }
    }
    get(key) {
        let ret;
        for (const entry of this.entries) {
            if (entry.key === key) {
                ret = entry.value;
                break;
            }
        }
        return ret;
    }
    remove(key) {
        const i = this.entries.findIndex((item) => item.key === key);
        if (i !== 1) {
            this.entries.splice(i, 1);
        }
    }
    first() {
        return this.entries[0].value;
    }
    last() {
        return this.entries[this.length - 1].value;
    }
    keys() {
        const keys = [];
        for (const entry of this.entries) {
            keys.push(entry.key);
        }
        return keys;
    }
    values() {
        const values = [];
        for (const entry of this.entries) {
            values.push(entry.value);
        }
        return values;
    }
    randomKey() {
        const keys = this.keys();
        return keys[Math.floor(Math.random() * keys.length)];
    }
    random() {
        const values = this.values();
        return values[Math.floor(Math.random() * values.length)];
    }
    [Symbol.iterator]() {
        let i = -1;
        const entries = this.entries;
        return {
            next() {
                return {
                    value: entries[++i]
                        ? [entries[i].key, entries[i].value]
                        : undefined,
                    done: i >= entries.length
                };
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL3J1bm5lci9Db2xsZWN0aW9ucy9Db2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sQ0FBQyxPQUFPO0lBQ0wsT0FBTyxDQUFVO0lBRXpCLFlBQVksR0FBRyxPQUFnQjtRQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFHLE9BQU87WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHLE9BQWdCO1FBQzNCLEtBQUksTUFBTSxLQUFLLElBQUksT0FBTyxFQUFDO1lBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0YsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ2QsSUFBSSxHQUFHLENBQUM7UUFDUixLQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDL0IsSUFBRyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBQztnQkFDcEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ2xCLE1BQU07YUFDTjtTQUNEO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVc7UUFDakIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDN0QsSUFBRyxDQUFDLEtBQUssQ0FBQyxFQUFDO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO0lBQ0YsQ0FBQztJQUVELEtBQUs7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJO1FBQ0gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJO1FBQ0gsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBQzFCLEtBQUksTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBQztZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU07UUFDTCxNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7UUFDekIsS0FBSSxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUztRQUNSLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTTtRQUNMLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QixPQUFPO1lBQ04sSUFBSTtnQkFDSCxPQUFPO29CQUNOLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQ2xCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzt3QkFDbkMsQ0FBQyxDQUFDLFNBQVM7b0JBQ1osSUFBSSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTTtpQkFDekIsQ0FBQTtZQUNGLENBQUM7U0FDRCxDQUFBO0lBQ0YsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIEVudHJ5e1xuXHRrZXk6IHN0cmluZztcblx0dmFsdWU6IGFueTtcbn1cblxuaW50ZXJmYWNlIENvbGxlY3Rpb25JdGVyYWJsZXtcblx0dmFsdWU6IGFueSB8IHVuZGVmaW5lZDtcblx0ZG9uZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3N7XG5cdHByaXZhdGUgZW50cmllczogRW50cnlbXTtcblx0XG5cdGNvbnN0cnVjdG9yKC4uLmVudHJpZXM6IEVudHJ5W10pe1xuXHRcdHRoaXMuZW50cmllcyA9IFtdO1xuXHRcdGlmKGVudHJpZXMpIHRoaXMuYWRkRW50cnkoLi4uZW50cmllcyk7XG5cdH1cblxuXHRnZXQgbGVuZ3RoKCl7XG5cdFx0cmV0dXJuIHRoaXMuZW50cmllcy5sZW5ndGg7XG5cdH1cblx0XG5cdGFkZEVudHJ5KC4uLmVudHJpZXM6IEVudHJ5W10pe1xuXHRcdGZvcihjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcblx0XHRcdHRoaXMuZW50cmllcy5wdXNoKGVudHJ5KTtcblx0XHR9XG5cdH1cblxuXHRnZXQoa2V5OiBzdHJpbmcpe1xuXHRcdGxldCByZXQ7XG5cdFx0Zm9yKGNvbnN0IGVudHJ5IG9mIHRoaXMuZW50cmllcyl7XG5cdFx0XHRpZihlbnRyeS5rZXkgPT09IGtleSl7XG5cdFx0XHRcdHJldCA9IGVudHJ5LnZhbHVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHJlbW92ZShrZXk6IHN0cmluZyl7XG5cdFx0Y29uc3QgaSA9IHRoaXMuZW50cmllcy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0ua2V5ID09PSBrZXkpO1xuXHRcdGlmKGkgIT09IDEpe1xuXHRcdFx0dGhpcy5lbnRyaWVzLnNwbGljZShpLDEpO1xuXHRcdH1cblx0fVxuXG5cdGZpcnN0KCl7XG5cdFx0cmV0dXJuIHRoaXMuZW50cmllc1swXS52YWx1ZTtcblx0fVxuXG5cdGxhc3QoKXtcblx0XHRyZXR1cm4gdGhpcy5lbnRyaWVzW3RoaXMubGVuZ3RoIC0gMV0udmFsdWU7XG5cdH1cblxuXHRrZXlzKCl7XG5cdFx0Y29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcblx0XHRmb3IoY29uc3QgZW50cnkgb2YgdGhpcy5lbnRyaWVzKXtcblx0XHRcdGtleXMucHVzaChlbnRyeS5rZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4ga2V5cztcblx0fVxuXG5cdHZhbHVlcygpe1xuXHRcdGNvbnN0IHZhbHVlczogYW55W10gPSBbXTtcblx0XHRmb3IoY29uc3QgZW50cnkgb2YgdGhpcy5lbnRyaWVzKXtcblx0XHRcdHZhbHVlcy5wdXNoKGVudHJ5LnZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxuXG5cdHJhbmRvbUtleSgpe1xuXHRcdGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKTtcblx0XHRyZXR1cm4ga2V5c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBrZXlzLmxlbmd0aCldO1xuXHR9XG5cblx0cmFuZG9tKCl7XG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy52YWx1ZXMoKTtcblx0XHRyZXR1cm4gdmFsdWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZhbHVlcy5sZW5ndGgpXTtcblx0fVxuXG5cdFtTeW1ib2wuaXRlcmF0b3JdKCl7XG5cdFx0bGV0IGkgPSAtMTtcblx0XHRjb25zdCBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuXHRcdHJldHVybiB7XG5cdFx0XHRuZXh0KCk6IENvbGxlY3Rpb25JdGVyYWJsZXtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR2YWx1ZTogZW50cmllc1srK2ldXG5cdFx0XHRcdFx0XHQ/IFtlbnRyaWVzW2ldLmtleSxlbnRyaWVzW2ldLnZhbHVlXVxuXHRcdFx0XHRcdFx0OiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0ZG9uZTogaSA+PSBlbnRyaWVzLmxlbmd0aFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59Il19